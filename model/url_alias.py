from model.model import Model


class URL_Alias(Model):
    TABLE = 'url_aliases'
    COLS_IGNORE = ['id']
    COLS_EXE_FCT = ['public_id']
    PUBLIC_ID_LENGTH = 5

    def __init__(self):
        params = {
            'table_name': self.TABLE
        }
        super().__init__(**params)

    def insert(self, data):
        # public_id column generated by generate_public_id('urls'::text, 5) function so no need to insert
        if 'public_id' not in data or data['public_id'] is None or data['public_id'] == '':
            data['public_id'] = f"generate_public_id('{self.TABLE}'::text, {self.PUBLIC_ID_LENGTH})"
        return super().insert(data)

    def insert_no_return(self, params):
        # public_id column generated by generate_public_id('urls'::text, 5) function so no need to insert
        if 'public_id' not in params or params['public_id'] is None or params['public_id'] == '':
            params['public_id'] = f"generate_public_id('{self.TABLE}'::text, {self.PUBLIC_ID_LENGTH})"
        return super().insert_no_return(params)

    def get_by_public_id(self, public_id):
        return self.get_by_field('public_id', public_id)

    def get_by_url_id(self, url_id, **kwargs):
        cookie_uuid = kwargs.get('cookie_uuid')
        user_id = kwargs.get('user_id')
        conditions = [
            {
                'column': 'url_id',
                'value': url_id
            }
        ]
        if cookie_uuid:
            conditions.append({
                'column': 'cookie_uuid',
                'value': cookie_uuid
            })
        elif user_id:
            conditions.append({
                'column': 'user_id',
                'value': user_id
            })
        return self.get_by_conditions(conditions)

    def get_by_alias_name(self, alias_name, **kwargs):
        cookie_uuid = kwargs.get('cookie_uuid')
        user_id = kwargs.get('user_id')
        conditions = [
            {
                'column': 'alias_name',
                'value': alias_name
            }
        ]
        if cookie_uuid:
            conditions.append({
                'column': 'cookie_uuid',
                'value': cookie_uuid
            })
        elif user_id:
            conditions.append({
                'column': 'user_id',
                'value': user_id
            })
        return self.get_by_conditions(conditions)

    def get_list_by_cookie_uuid(self, cookie_uuid, **kwargs):
        from model.url import URL

        url_id = kwargs.get('url_id')
        more_condition = ''
        if url_id:
            more_condition = f"AND ua.url_id = %(url_id)s"

        query = f"""
            SELECT
                ua.id,
                ua.user_id,
                ua.public_id,
                ua.qrcode_path,
                u.destination_link,
                CASE
                    WHEN ua.alias_name IN (NULL, '') THEN ua.public_id
                    ELSE ua.alias_name
				END AS alias_name
            FROM {URL.TABLE} u 
                LEFT JOIN {self.TABLE} ua
                    ON u.id = ua.url_id 
            WHERE
                ua.cookie_uuid = %(cookie_uuid)s
                {more_condition}
        """.format(more_condition=more_condition)

        params = {
            'cookie_uuid': cookie_uuid,
        }
        if url_id:
            params['url_id'] = url_id

        kwargs = {
            'query': query,
            'limit': 5,
            'page': 1,
            'order_by': 'ORDER BY ua.created_at DESC'
        }

        rows = self.get_list(params, **kwargs)
        if rows:
            return rows
        return []

    def get_by_alias_name_or_public_id(self, alias_name_or_public_id):
        from model.url import URL
        query = f"""
            SELECT *, 
                ua.id as url_alias_id
            FROM {self.TABLE} ua
                LEFT JOIN {URL.TABLE} u
                    ON u.id = ua.url_id 
            WHERE
                CASE
                    WHEN ua.alias_name IN (NULL, '') THEN 
                        ua.public_id = %(alias_name_or_public_id)s
                    ELSE
                        ua.alias_name = %(alias_name_or_public_id)s
                END
        """
        row = self.fetch_one(query, params={'alias_name_or_public_id': alias_name_or_public_id})
        if row:
            self.data = row
            return self
        return None

    def get_total_alias_name_by_destination_link(self, destination_link, **kwargs):
        from model.url import URL
        from py.helper import Helper
        cookie_uuid = kwargs.get('cookie_uuid')
        user_id = kwargs.get('user_id')
        destination_link_hash = Helper.calculate_md5_hash(destination_link)

        more_condition = ''
        if cookie_uuid:
            more_condition = f"AND ua.cookie_uuid = %(cookie_uuid)s"
        elif user_id:
            more_condition = f"AND ua.user_id = %(user_id)s"

        query = f"""
            SELECT COUNT(*) AS total_count FROM {self.TABLE} ua
                LEFT JOIN {URL.TABLE} u
                    ON u.id = ua.url_id 
            WHERE
                u.destination_link_hash = %(destination_link_hash)s
                {more_condition}
        """.format(more_condition=more_condition)

        row = self.fetch_one(query, params={
            'destination_link_hash': destination_link_hash,
            'cookie_uuid': cookie_uuid,
            'user_id': user_id
        })
        if row:
            return row['total_count']
        return 0

    def get_list_by_user_id(self, user_id):
        from model.url import URL

        query = f"""
                    SELECT
                        ua.id,
                        ua.user_id,
                        ua.public_id,
                        ua.qrcode_path,
                        u.destination_link,
                        ua.created_at,
                        CASE
                            WHEN ua.alias_name IN (NULL, '') THEN ua.public_id
                            ELSE ua.alias_name
        				END AS alias_name
                    FROM {URL.TABLE} u 
                        LEFT JOIN {self.TABLE} ua
                            ON u.id = ua.url_id 
                    WHERE
                        ua.user_id = %(user_id)s
                """

        params = {
            'user_id': user_id,
        }

        kwargs = {
            'query': query,
            'limit': 5,
            'page': 1,
            'order_by': 'ORDER BY ua.id DESC'
        }

        rows = self.get_list(params, **kwargs)
        if rows:
            return rows
        return []

